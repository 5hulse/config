global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

endglobal

snippet dc "documentclass" b
\documentclass[$1]{$2}
endsnippet

snippet cols "Columns" b
\begin{columns}
	\begin{column}{$1\textwidth}
		$2
	\end{column}
	\begin{column}{$3\textwidth}
		$4
	\end{column}
\end{columns}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
    \item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
    \item $0
\end{itemize}
endsnippet

snippet eqn "Equation" b
\begin{equation}
	$0.
\end{equation}
endsnippet

snippet seqn "Subequations" b
\begin{subequations}
	\begin{gather}
		$0.
	\end{gather}
\end{subequations}
endsnippet

snippet alg "Algorithm" b
\begin{algorithm}
	\begin{algorithmic}[1]
		$0
	\end{algorithmic}
\end{algorithm}
endsnippet

snippet proc "Procedure" b
\Procedure{$1}{$2}
	$0
\EndProcedure
endsnippet

snippet frm "Frame" b
\begin{frame}
	\frametitle{$0}
\end{frame}
endsnippet

snippet beg "Startend of an environment" b
\begin{$1}
	$0
\end{$1}
endsnippet

snippet mk "Inline math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display math" wA
\[
$1
.\] $0
endsnippet

context "math()"
snippet frac "Fraction" b
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet bf "Boldsymbol" wA
\symbf{$1}$0
endsnippet

context "math()"
snippet lr "Left and right delimiters" wA
\left$1 $3 \right$2 $0
endsnippet
