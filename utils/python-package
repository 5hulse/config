#!/usr/bin/env python3

# utils/python-package
# Simon Hulse
# simonhulse@protonmail.com
# Last Edited: Mon 09 Sep 2024 04:57:59 PM EDT

import datetime
import os
import re
import subprocess
import sys
from pathlib import Path


class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, new_path):
        self.new_path = new_path

    def __enter__(self):
        self.saved_path = Path.cwd()
        os.chdir(self.new_path)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.saved_path)


assert len(sys.argv) in [2, 3]
package_name = sys.argv[1]
if len(sys.argv) == 3:
    assert re.fullmatch(r"\d+", sys.argv[2])
    min_python3_version = int(sys.argv[2])
else:
    min_python3_version = 8


classifiers = "\n".join(
    [f"    \"Programming Language :: Python :: 3.{x}\","
     for x in range(min_python3_version, 13)]
)

package_root = Path(f"./{package_name}").resolve()

source_dir = package_root / "src" / package_name
test_dir = package_root / "tests"
doc_dir = package_root / "docs"
static_dir = doc_dir / "_static"
templates_dir = doc_dir / "_templates"
build_dir = doc_dir / "_build"

year = str(datetime.datetime.now().year)
min_python = f"3.{min_python3_version}"
python_exe = f"python{min_python}"
python_venv_exe = package_root / ".venv" / "bin" / "python"

files = [
    # __init__.py
    (
        source_dir / "__init__.py",
f"""import importlib.metadata

__version__ = importlib.metadata.version("{package_name}")
""",
    ),
    # LICENSE
    (
        package_root / "LICENSE",
f"""Copyright (c) {year} Simon Hulse

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
    ),
    (
        package_root / "pyproject.toml",
f"""[build-system]
requires = [
    "setuptools>42",
    "wheel"
]
build-backend = "setuptools.build_meta"

[project]
name = "{package_name}"
version = "1.0.0"
authors = [
    {{name = "Simon Hulse", email = "simonhulse@protonmail.com"}}
]
license = {{file = "LICENSE"}}
# keywords = [
#     ...
# ]
description = ""
readme = "README.rst"
requires-python = ">={min_python}"
classifiers = [
{classifiers}
]
# dependencies = [
#     ...
# ]

[project.urls]
documentation = "https://5hulse.github.io/{package_name}/"
github = "https://github.com/5hulse/{package_name}"

[project.optional-dependencies]
dev = [
    "flake8-pyproject",
    "pytest",
    "pytest-cov",
]
docs = [
    "Sphinx",
    "furo",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q -s --cov=src/{package_name}/ --cov-config=.coveragerc --cov-report html"
testpaths = ["tests"]

[tool.flake8]
ignore = [
    "E203",
    "E731",
    "E741",
    "W504",
]
per_file_ignores = [
    "src/{package_name}/__init__.py: E402,F401",
]
max-line-length = 88
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
]
"""
    ),
    # README.md
    (
        package_root / "README.md",
f"""README for {package_name}
<underline>
""".replace("<underline>", (11 + len(package_name)) * "=")
    ),
    # Sphinx conf.py
    (
        doc_dir / "conf.py",
f"""# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information

project = "{package_name}"
copyright = "{year}, Simon Hulse"
author = "Simon Hulse"

version = "1.0.0"
release = "1.0.0"

# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

extensions = []

templates_path = ["_templates"]
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

language = "en"

# -- Options for HTML output -------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

html_theme = "furo"
html_static_path = ["_static"]
"""
    ),
    # Sphinx index.rst
    (
        doc_dir / "index.rst",
f"""Welcome to {package_name}'s documentation!
<underline>

.. toctree::
   :maxdepth: 2
   :caption: Contents:


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
""".replace("<underline>", (28 + len(package_name)) * "="),
    ),
    # Sphinx make.bat
    (
        doc_dir / "make.bat",
f"""@ECHO OFF

pushd %~dp0

REM Command file for Sphinx documentation

if "%SPHINXBUILD%" == "" (
	set SPHINXBUILD=sphinx-build
)
set SOURCEDIR={doc_dir}
set BUILDDIR={build_dir}

%SPHINXBUILD% >NUL 2>NUL
if errorlevel 9009 (
	echo.
	echo.The 'sphinx-build' command was not found. Make sure you have Sphinx
	echo.installed, then set the SPHINXBUILD environment variable to point
	echo.to the full path of the 'sphinx-build' executable. Alternatively you
	echo.may add the Sphinx directory to PATH.
	echo.
	echo.If you don't have Sphinx installed, grab it from
	echo.https://www.sphinx-doc.org/
	exit /b 1
)

if "%1" == "" goto help

%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
goto end

:help
%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%

:end
popd
]""",
    ),
    (
        doc_dir / "Makefile",
f"""# Minimal makefile for Sphinx documentation
#

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS    ?=
SPHINXBUILD   ?= sphinx-build
SOURCEDIR     = {doc_dir}
BUILDDIR      = {build_dir}

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

.PHONY: help Makefile

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
    ),
]""",
    ),
]


for directory in (source_dir, doc_dir, test_dir, build_dir, templates_dir, static_dir):
    directory.mkdir(parents=True, exist_ok=False)

for (path, contents) in files:
    with open(path, "w") as fh:
        fh.write(contents)

with cd(package_root):
    subprocess.run(f"{python_exe} -m venv .venv", shell=True)
    subprocess.run(f"{python_venv_exe} -m pip install --upgrade pip", shell=True)
    subprocess.run(f"{python_venv_exe} -m pip install -e .[dev,docs]", shell=True)
